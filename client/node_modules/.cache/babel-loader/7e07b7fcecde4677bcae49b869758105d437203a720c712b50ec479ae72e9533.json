{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst pool = require('../config/db');\nconst jwt = require('jsonwebtoken');\nconst verifyAdmin = (req, res, next) => {\n  var _req$headers$authoriz;\n  const token = (_req$headers$authoriz = req.headers.authorization) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(' ')[1];\n  if (!token) {\n    return res.status(401).json({\n      mensagem: 'Não autorizado'\n    });\n  }\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');\n    if (decoded.role !== 'admin') {\n      return res.status(403).json({\n        mensagem: 'Acesso negado'\n      });\n    }\n    req.usuario = decoded;\n    next();\n  } catch (error) {\n    return res.status(401).json({\n      mensagem: 'Token inválido'\n    });\n  }\n};\nrouter.get('/', verifyAdmin, async (req, res) => {\n  try {\n    const [usuarios] = await pool.query('SELECT id, nome, email, telefone FROM usuarios');\n    res.status(200).json({\n      usuarios\n    });\n  } catch (error) {\n    console.error('Erro ao listar usuários:', error);\n    res.status(500).json({\n      mensagem: 'Erro no servidor'\n    });\n  }\n});\nrouter.put('/:id', verifyAdmin, async (req, res) => {\n  const {\n    nome,\n    email,\n    telefone\n  } = req.body;\n  const usuario_id = req.params.id;\n  if (!nome || !email || !telefone) {\n    return res.status(400).json({\n      mensagem: 'Nome, e-mail e telefone são obrigatórios'\n    });\n  }\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    return res.status(400).json({\n      mensagem: 'E-mail inválido'\n    });\n  }\n  const telefoneRegex = /^\\d{9,15}$/;\n  if (!telefoneRegex.test(telefone)) {\n    return res.status(400).json({\n      mensagem: 'Telefone inválido (deve conter entre 9 e 15 dígitos)'\n    });\n  }\n  try {\n    const [existingEmails] = await pool.query('SELECT id FROM usuarios WHERE email = ? AND id != ?', [email, usuario_id]);\n    if (existingEmails.length > 0) {\n      return res.status(400).json({\n        mensagem: 'E-mail já está em uso por outro usuário'\n      });\n    }\n    await pool.query('UPDATE usuarios SET nome = ?, email = ?, telefone = ? WHERE id = ?', [nome, email, telefone, usuario_id]);\n    res.status(200).json({\n      mensagem: 'Dados pessoais atualizados com sucesso'\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar dados pessoais:', error);\n    res.status(500).json({\n      mensagem: 'Erro no servidor'\n    });\n  }\n});\nrouter.delete('/:id', verifyAdmin, async (req, res) => {\n  const usuario_id = req.params.id;\n  try {\n    const [result] = await pool.query('DELETE FROM usuarios WHERE id = ?', [usuario_id]);\n    if (result.affectedRows === 0) {\n      return res.status(404).json({\n        mensagem: 'Usuário não encontrado'\n      });\n    }\n    res.status(200).json({\n      mensagem: 'Usuário excluído com sucesso'\n    });\n  } catch (error) {\n    console.error('Erro ao excluir usuário:', error);\n    res.status(500).json({\n      mensagem: 'Erro no servidor'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","pool","jwt","verifyAdmin","req","res","next","_req$headers$authoriz","token","headers","authorization","split","status","json","mensagem","decoded","verify","process","env","JWT_SECRET","role","usuario","error","get","usuarios","query","console","put","nome","email","telefone","body","usuario_id","params","id","emailRegex","test","telefoneRegex","existingEmails","length","delete","result","affectedRows","module","exports"],"sources":["C:/Users/ASUS/Desktop/DMS/DMS/client/src/pages/Admin/Usuarios.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst pool = require('../config/db');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst verifyAdmin = (req, res, next) => {\r\n  const token = req.headers.authorization?.split(' ')[1];\r\n  if (!token) {\r\n    return res.status(401).json({ mensagem: 'Não autorizado' });\r\n  }\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');\r\n    if (decoded.role !== 'admin') {\r\n      return res.status(403).json({ mensagem: 'Acesso negado' });\r\n    }\r\n    req.usuario = decoded;\r\n    next();\r\n  } catch (error) {\r\n    return res.status(401).json({ mensagem: 'Token inválido' });\r\n  }\r\n};\r\n\r\nrouter.get('/', verifyAdmin, async (req, res) => {\r\n  try {\r\n    const [usuarios] = await pool.query('SELECT id, nome, email, telefone FROM usuarios');\r\n    res.status(200).json({ usuarios });\r\n  } catch (error) {\r\n    console.error('Erro ao listar usuários:', error);\r\n    res.status(500).json({ mensagem: 'Erro no servidor' });\r\n  }\r\n});\r\n\r\nrouter.put('/:id', verifyAdmin, async (req, res) => {\r\n  const { nome, email, telefone } = req.body;\r\n  const usuario_id = req.params.id;\r\n\r\n  if (!nome || !email || !telefone) {\r\n    return res.status(400).json({ mensagem: 'Nome, e-mail e telefone são obrigatórios' });\r\n  }\r\n\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (!emailRegex.test(email)) {\r\n    return res.status(400).json({ mensagem: 'E-mail inválido' });\r\n  }\r\n\r\n  const telefoneRegex = /^\\d{9,15}$/;\r\n  if (!telefoneRegex.test(telefone)) {\r\n    return res.status(400).json({ mensagem: 'Telefone inválido (deve conter entre 9 e 15 dígitos)' });\r\n  }\r\n\r\n  try {\r\n    const [existingEmails] = await pool.query('SELECT id FROM usuarios WHERE email = ? AND id != ?', [email, usuario_id]);\r\n    if (existingEmails.length > 0) {\r\n      return res.status(400).json({ mensagem: 'E-mail já está em uso por outro usuário' });\r\n    }\r\n\r\n    await pool.query(\r\n      'UPDATE usuarios SET nome = ?, email = ?, telefone = ? WHERE id = ?',\r\n      [nome, email, telefone, usuario_id]\r\n    );\r\n\r\n    res.status(200).json({ mensagem: 'Dados pessoais atualizados com sucesso' });\r\n  } catch (error) {\r\n    console.error('Erro ao atualizar dados pessoais:', error);\r\n    res.status(500).json({ mensagem: 'Erro no servidor' });\r\n  }\r\n});\r\n\r\nrouter.delete('/:id', verifyAdmin, async (req, res) => {\r\n  const usuario_id = req.params.id;\r\n\r\n  try {\r\n    const [result] = await pool.query('DELETE FROM usuarios WHERE id = ?', [usuario_id]);\r\n    if (result.affectedRows === 0) {\r\n      return res.status(404).json({ mensagem: 'Usuário não encontrado' });\r\n    }\r\n    res.status(200).json({ mensagem: 'Usuário excluído com sucesso' });\r\n  } catch (error) {\r\n    console.error('Erro ao excluir usuário:', error);\r\n    res.status(500).json({ mensagem: 'Erro no servidor' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}