{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst pool = require('../config/db');\n\n// Middleware to verify admin authentication\nconst verifyAdmin = (req, res, next) => {\n  var _req$headers$authoriz;\n  const token = (_req$headers$authoriz = req.headers.authorization) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(' ')[1];\n  if (!token) {\n    return res.status(401).json({\n      mensagem: 'Não autorizado'\n    });\n  }\n  // Add your JWT verification logic here (e.g., using jsonwebtoken)\n  // Example: jwt.verify(token, process.env.JWT_SECRET)\n  next();\n};\n\n// List all users\nrouter.get('/', verifyAdmin, async (req, res) => {\n  try {\n    const [usuarios] = await pool.query('SELECT id, nome, email, telefone FROM usuarios');\n    res.status(200).json({\n      usuarios\n    });\n  } catch (error) {\n    console.error('Erro ao listar usuários:', error);\n    res.status(500).json({\n      mensagem: 'Erro no servidor'\n    });\n  }\n});\n\n// Update user\nrouter.put('/:id', verifyAdmin, async (req, res) => {\n  const {\n    nome,\n    email,\n    telefone\n  } = req.body;\n  const usuario_id = req.params.id;\n  if (!nome || !email || !telefone) {\n    return res.status(400).json({\n      mensagem: 'Nome, e-mail e telefone são obrigatórios'\n    });\n  }\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    return res.status(400).json({\n      mensagem: 'E-mail inválido'\n    });\n  }\n  const telefoneRegex = /^\\d{9,15}$/;\n  if (!telefoneRegex.test(telefone)) {\n    return res.status(400).json({\n      mensagem: 'Telefone inválido (deve conter entre 9 e 15 dígitos)'\n    });\n  }\n  try {\n    const [existingEmails] = await pool.query('SELECT id FROM usuarios WHERE email = ? AND id != ?', [email, usuario_id]);\n    if (existingEmails.length > 0) {\n      return res.status(400).json({\n        mensagem: 'E-mail já está em uso por outro usuário'\n      });\n    }\n    await pool.query('UPDATE usuarios SET nome = ?, email = ?, telefone = ? WHERE id = ?', [nome, email, telefone, usuario_id]);\n    res.status(200).json({\n      mensagem: 'Dados pessoais atualizados com sucesso'\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar dados pessoais:', error);\n    res.status(500).json({\n      mensagem: 'Erro no servidor'\n    });\n  }\n});\n\n// Delete user\nrouter.delete('/:id', verifyAdmin, async (req, res) => {\n  const usuario_id = req.params.id;\n  try {\n    const [result] = await pool.query('DELETE FROM usuarios WHERE id = ?', [usuario_id]);\n    if (result.affectedRows === 0) {\n      return res.status(404).json({\n        mensagem: 'Usuário não encontrado'\n      });\n    }\n    res.status(200).json({\n      mensagem: 'Usuário excluído com sucesso'\n    });\n  } catch (error) {\n    console.error('Erro ao excluir usuário:', error);\n    res.status(500).json({\n      mensagem: 'Erro no servidor'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","pool","verifyAdmin","req","res","next","_req$headers$authoriz","token","headers","authorization","split","status","json","mensagem","get","usuarios","query","error","console","put","nome","email","telefone","body","usuario_id","params","id","emailRegex","test","telefoneRegex","existingEmails","length","delete","result","affectedRows","module","exports"],"sources":["C:/Users/ASUS/Desktop/DMS/DMS/client/src/pages/Admin/Usuarios.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst pool = require('../config/db');\r\n\r\n// Middleware to verify admin authentication\r\nconst verifyAdmin = (req, res, next) => {\r\n  const token = req.headers.authorization?.split(' ')[1];\r\n  if (!token) {\r\n    return res.status(401).json({ mensagem: 'Não autorizado' });\r\n  }\r\n  // Add your JWT verification logic here (e.g., using jsonwebtoken)\r\n  // Example: jwt.verify(token, process.env.JWT_SECRET)\r\n  next();\r\n};\r\n\r\n// List all users\r\nrouter.get('/', verifyAdmin, async (req, res) => {\r\n  try {\r\n    const [usuarios] = await pool.query('SELECT id, nome, email, telefone FROM usuarios');\r\n    res.status(200).json({ usuarios });\r\n  } catch (error) {\r\n    console.error('Erro ao listar usuários:', error);\r\n    res.status(500).json({ mensagem: 'Erro no servidor' });\r\n  }\r\n});\r\n\r\n// Update user\r\nrouter.put('/:id', verifyAdmin, async (req, res) => {\r\n  const { nome, email, telefone } = req.body;\r\n  const usuario_id = req.params.id;\r\n\r\n  if (!nome || !email || !telefone) {\r\n    return res.status(400).json({ mensagem: 'Nome, e-mail e telefone são obrigatórios' });\r\n  }\r\n\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (!emailRegex.test(email)) {\r\n    return res.status(400).json({ mensagem: 'E-mail inválido' });\r\n  }\r\n\r\n  const telefoneRegex = /^\\d{9,15}$/;\r\n  if (!telefoneRegex.test(telefone)) {\r\n    return res.status(400).json({ mensagem: 'Telefone inválido (deve conter entre 9 e 15 dígitos)' });\r\n  }\r\n\r\n  try {\r\n    const [existingEmails] = await pool.query('SELECT id FROM usuarios WHERE email = ? AND id != ?', [email, usuario_id]);\r\n    if (existingEmails.length > 0) {\r\n      return res.status(400).json({ mensagem: 'E-mail já está em uso por outro usuário' });\r\n    }\r\n\r\n    await pool.query(\r\n      'UPDATE usuarios SET nome = ?, email = ?, telefone = ? WHERE id = ?',\r\n      [nome, email, telefone, usuario_id]\r\n    );\r\n\r\n    res.status(200).json({ mensagem: 'Dados pessoais atualizados com sucesso' });\r\n  } catch (error) {\r\n    console.error('Erro ao atualizar dados pessoais:', error);\r\n    res.status(500).json({ mensagem: 'Erro no servidor' });\r\n  }\r\n});\r\n\r\n// Delete user\r\nrouter.delete('/:id', verifyAdmin, async (req, res) => {\r\n  const usuario_id = req.params.id;\r\n\r\n  try {\r\n    const [result] = await pool.query('DELETE FROM usuarios WHERE id = ?', [usuario_id]);\r\n    if (result.affectedRows === 0) {\r\n      return res.status(404).json({ mensagem: 'Usuário não encontrado' });\r\n    }\r\n    res.status(200).json({ mensagem: 'Usuário excluído com sucesso' });\r\n  } catch (error) {\r\n    console.error('Erro ao excluir usuário:', error);\r\n    res.status(500).json({ mensagem: 'Erro no servidor' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}